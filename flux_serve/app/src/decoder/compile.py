import argparse
import copy
import os
import torch
import torch_neuronx
from diffusers import FluxPipeline
from model import TracingVAEDecoderWrapper
from huggingface_hub import login
hf_token=os.environ['HUGGINGFACE_TOKEN'].strip()
login(hf_token,add_to_git_credential=True)

COMPILER_WORKDIR_ROOT = os.path.dirname(__file__)
DTYPE=torch.bfloat16

def trace_vae(height, width):
    pipe = FluxPipeline.from_pretrained(
        "black-forest-labs/FLUX.1-dev",
        torch_dtype=torch.float32)
    decoder = copy.deepcopy(pipe.vae.decoder)
    decoder = TracingVAEDecoderWrapper(decoder)
    del pipe

    latents = torch.rand([1, 16, height // 8, width // 8],
                         dtype=DTYPE)

    decoder_neuron = torch_neuronx.trace(
        decoder,
        latents,
        compiler_workdir=os.path.join(COMPILER_WORKDIR_ROOT,
                                      'compiler_workdir'),
        compiler_args="""--model-type=unet-inference"""
        )

    torch_neuronx.async_load(decoder_neuron)

    compiled_model_path = os.path.join(COMPILER_WORKDIR_ROOT, 'compiled_model')
    if not os.path.exists(compiled_model_path):
        os.mkdir(compiled_model_path)
    decoder_filename = os.path.join(COMPILER_WORKDIR_ROOT,
                                    'compiled_model/model.pt')
    torch.jit.save(decoder_neuron, decoder_filename)

    del decoder
    del decoder_neuron


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-hh",
        "--height",
        type=int,
        default=1024,
        help="height of images to be generated by compilation of this model"
    )
    parser.add_argument(
        "-w",
        "--width",
        type=int,
        default=1024,
        help="width of images to be generated by compilation of this model"
    )
    args = parser.parse_args()
    trace_vae(args.height, args.width)

